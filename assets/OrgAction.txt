
package money.plan;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import com.opensymphony.xwork2.ActionContext;

import dwz.constants.BeanManagerKey;
import dwz.framework.core.exception.ValidateFieldsException;
import dwz.framework.utils.excel.XlsExport;
import dwz.present.BaseAction;

/**
 * 关于计划任务表的Action操作类.
 * @author www(水清)
 * 任何人和公司可以传播并且修改本程序，但是不得去掉本段声明以及作者署名.
 * http://www.iteye.com
 */ 
public class PlanAction extends BaseAction {
	/**
	 *  序列化对象.
	 */
	private static final long serialVersionUID = 1L;
	//业务接口对象.
	PlanManager pMgr = bf.getManager(BeanManagerKey.planManager);
	//业务实体对象
	private Plan planVo;
	//当前页数
	private int page = 1;
	//每页显示数量
	private int pageSize = 50;
	//总页数
	private long count;
	
	public String beforeAdd() {
		return "detail";
	}

	public String doAdd() {
		try {
			PlanImpl planImpl = new PlanImpl( palnId , planDate , planDesc , planType , planStatus , userId , startDate , realStartDate , endDate , realEndDate );
			pMgr.createPlan(planImpl);
		} catch (ValidateFieldsException e) {
			log.error(e);
			return ajaxForwardError(e.getLocalizedMessage());
		}
		writeToPage(response,getText("msg.operation.success"));
		return null;
	}

	public String doDelete() {
		String ids = request.getParameter("ids");
		pMgr.removePlan(ids);
		return ajaxForwardSuccess(getText("msg.operation.success"));
	}

	public String beforeUpdate() {
		planVo = pMgr.getPlan(orgId);
		return "editdetail";
	}

	public String doUpdate() {
		try {
			PlanImpl planImpl = new PlanImpl( palnId , planDate , planDesc , planType , planStatus , userId , startDate , realStartDate , endDate , realEndDate );
			pMgr.updatePlan(planImpl);
		} catch (ValidateFieldsException e) {
			e.printStackTrace();
		}
		writeToPage(response,getText("msg.operation.success"));
		return null;
	} 
	
	public enum ExportFiled {
		  PALNID("计划id"),  PLANDATE("计划时间"),  PLANDESC("计划描述"),  PLANTYPE("计划类型"),  PLANSTATUS("计划状态"),  USERID("计划人"),  STARTDATE("开始时间"),  REALSTARTDATE("实际开始时间"),  ENDDATE("结束时间"),  REALENDDATE("实际结束时间");
		private String str;

		ExportFiled(String str) {
			this.str = str;
		}

		public String getName() {
			return this.str;
		}
	}

	public String beforeQuery() {
		return "query";
	}

	public String export() {
		response.setContentType("Application/excel");
		response.addHeader("Content-Disposition","attachment;filename=PlanList.xls");

		int pageNum = getPageNum();
		int numPerPage = getNumPerPage();
		int startIndex = (pageNum - 1) * numPerPage;
		Map<PlanSearchFields, Object> criterias = getCriterias();

		Collection<Plan> planList = pMgr.searchPlan(criterias, realOrderField(),
				startIndex, numPerPage);

		XlsExport e = new XlsExport();
		int rowIndex = 0;

		e.createRow(rowIndex++);
		for (ExportFiled filed : ExportFiled.values()) {
			e.setCell(filed.ordinal(), filed.getName());
		}

		for (Plan plan : planList) {
			e.createRow(rowIndex++);

			for (ExportFiled filed : ExportFiled.values()) {
				switch (filed) {
					case PALNID:
						 e.setCell(filed.ordinal(), plan.getPalnId()); 
					break;
					case PLANDATE:
						 e.setCell(filed.ordinal(), plan.getPlanDate()); 
					break;
					case PLANDESC:
						 e.setCell(filed.ordinal(), plan.getPlanDesc()); 
					break;
					case PLANTYPE:
						 e.setCell(filed.ordinal(), plan.getPlanType()); 
					break;
					case PLANSTATUS:
						 e.setCell(filed.ordinal(), plan.getPlanStatus()); 
					break;
					case USERID:
						 e.setCell(filed.ordinal(), plan.getUserId()); 
					break;
					case STARTDATE:
						 e.setCell(filed.ordinal(), plan.getStartDate()); 
					break;
					case REALSTARTDATE:
						 e.setCell(filed.ordinal(), plan.getRealStartDate()); 
					break;
					case ENDDATE:
						 e.setCell(filed.ordinal(), plan.getEndDate()); 
					break;
					case REALENDDATE:
						 e.setCell(filed.ordinal(), plan.getRealEndDate()); 
					break;
				default:
					break;
				}

			}
		}

		e.exportXls(response);
		return null;
	}

	public String query() {
		int pageNum = getPageNum();
		int numPerPage = getNumPerPage();
		int startIndex = (pageNum - 1) * numPerPage;
		Map<PlanSearchFields, Object> criterias = getCriterias();

		Collection<Plan> moneyList = pMgr.searchPlan(criterias, realOrderField(),
				startIndex, numPerPage);

		request.setAttribute("pageNum", pageNum);
		request.setAttribute("numPerPage", numPerPage);
		request.setAttribute("totalCount", pMgr.searchOrgNum(criterias));
		ActionContext.getContext().put("list", moneyList);
		ActionContext.getContext().put("pageNum", pageNum);
		ActionContext.getContext().put("numPerPage", numPerPage);
		ActionContext.getContext().put("totalCount",pMgr.searchOrgNum(criterias));
		return "list";
	}

	public String reQuery() {
		return "list";
	}

	public int getPage() {
		return page;
	}

	public void setPage(int page) {
		this.page = page;
	}

	public int getPageSize() {
		return pageSize;
	}

	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}

	public long getCount() {
		return count;
	}

	public void setCount(long count) {
		this.count = count;
	}

	private Map<PlanSearchFields, Object> getCriterias() {
		Map<PlanSearchFields, Object> criterias = new HashMap<PlanSearchFields, Object>();
		return criterias;
	}

	public Plan getPlanVo() {
		return planVo;
	}

	public void setPlanVo(Plan planVo) {
		this.planVo = planVo;
	}
  
	private int palnId; 
 	/**
 	 * 获取计划id的属性值.
 	 */
 	public Integer getPalnId(){
 		return palnId;
 	}
 	
 	/**
 	 * 设置计划id的属性值.
 	 */
 	public void setPalnId(Integer palnid){
 		this.palnId = palnid;
 	}
	private date planDate; 
 	/**
 	 * 获取计划时间的属性值.
 	 */
 	public Date getPlanDate(){
 		return planDate;
 	}
 	
 	/**
 	 * 设置计划时间的属性值.
 	 */
 	public void setPlanDate(Date plandate){
 		this.planDate = plandate;
 	}
	private string planDesc; 
 	/**
 	 * 获取计划描述的属性值.
 	 */
 	public String getPlanDesc(){
 		return planDesc;
 	}
 	
 	/**
 	 * 设置计划描述的属性值.
 	 */
 	public void setPlanDesc(String plandesc){
 		this.planDesc = plandesc;
 	}
	private int planType; 
 	/**
 	 * 获取计划类型的属性值.
 	 */
 	public int getPlanType(){
 		return planType;
 	}
 	
 	/**
 	 * 设置计划类型的属性值.
 	 */
 	public void setPlanType(int plantype){
 		this.planType = plantype;
 	}
	private int planStatus; 
 	/**
 	 * 获取计划状态的属性值.
 	 */
 	public int getPlanStatus(){
 		return planStatus;
 	}
 	
 	/**
 	 * 设置计划状态的属性值.
 	 */
 	public void setPlanStatus(int planstatus){
 		this.planStatus = planstatus;
 	}
	private int userId; 
 	/**
 	 * 获取计划人的属性值.
 	 */
 	public int getUserId(){
 		return userId;
 	}
 	
 	/**
 	 * 设置计划人的属性值.
 	 */
 	public void setUserId(int userid){
 		this.userId = userid;
 	}
	private date startDate; 
 	/**
 	 * 获取开始时间的属性值.
 	 */
 	public Date getStartDate(){
 		return startDate;
 	}
 	
 	/**
 	 * 设置开始时间的属性值.
 	 */
 	public void setStartDate(Date startdate){
 		this.startDate = startdate;
 	}
	private date realStartDate; 
 	/**
 	 * 获取实际开始时间的属性值.
 	 */
 	public Date getRealStartDate(){
 		return realStartDate;
 	}
 	
 	/**
 	 * 设置实际开始时间的属性值.
 	 */
 	public void setRealStartDate(Date realstartdate){
 		this.realStartDate = realstartdate;
 	}
	private date endDate; 
 	/**
 	 * 获取结束时间的属性值.
 	 */
 	public Date getEndDate(){
 		return endDate;
 	}
 	
 	/**
 	 * 设置结束时间的属性值.
 	 */
 	public void setEndDate(Date enddate){
 		this.endDate = enddate;
 	}
	private date realEndDate; 
 	/**
 	 * 获取实际结束时间的属性值.
 	 */
 	public Date getRealEndDate(){
 		return realEndDate;
 	}
 	
 	/**
 	 * 设置实际结束时间的属性值.
 	 */
 	public void setRealEndDate(Date realenddate){
 		this.realEndDate = realenddate;
 	}
}
